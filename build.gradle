plugins {
    id 'java-library'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'maven-publish'
    id 'jacoco'
}

group = 'com.r3edge'
version = '0.0.6'

base {
    archivesName = 'r3edge-task-dispatcher'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// Au sommet de build.gradle
def ghUser = project.findProperty('gpr.user') 
             ?: System.getenv('GPR_USER') 
             ?: System.getenv('GITHUB_ACTOR')
def ghKey  = project.findProperty('gpr.key')  
             ?: System.getenv('GPR_KEY')  
             ?: System.getenv('GITHUB_TOKEN')

// D√©claration de la version Spring Cloud
ext {
    set('springCloudVersion', '2025.0.0')
}

repositories {
    mavenCentral()
    mavenLocal()
    gradlePluginPortal()
    // üîß N√©cessaire pour Spring Cloud
    maven { url 'https://repo.spring.io/release' }
}

dependencies {
    // Annotations et runtime
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Spring minimum requis pour la lib
    compileOnly 'org.springframework.cloud:spring-cloud-context:4.3.0'
    compileOnly  'org.springframework.boot:spring-boot-starter'
    compileOnly 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'

    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    // Pour activer @Slf4j dans les tests
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'    
    
    testImplementation 'org.springframework.cloud:spring-cloud-context:4.3.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'

}

test {
    useJUnitPlatform()
    finalizedBy tasks.jacocoTestReport
    jvmArgs '-Djava.net.preferIPv4Stack=true', '-Dfile.encoding=UTF-8'
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

springBoot {
    buildInfo()
}

tasks.named("bootJar") {
    enabled = false
}

tasks.named("jar") {
    enabled = true
    configure {
        manifest {
            attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'r3edge.com',
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Build-Jdk': System.getProperty('java.version')
            )
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = base.archivesName.get()
            version = project.version

            from components.java
            
            pom {
                name = 'r3edge-task-dispatcher'
                description = 'Une librairie Spring Boot simple pour d√©finir des t√¢ches dans un fichier YAML et les associer √† des handlers typ√©s ex√©cut√©s automatiquement au d√©marrage ou via un hot-reload.'
                url = 'https://github.com/dsissoko/r3edge-task-dispatcher'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
            }
            
            versionMapping {
                usage('java-api') {
                    fromResolutionResult()
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/dsissoko/r3edge-task-dispatcher")
            credentials {
                username = ghUser
                password = ghKey
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-parameters"
}

tasks.withType(Javadoc).configureEach {
    options.encoding = "UTF-8"
}
