package com.r3edge.tasks.dispatcher.impl.defaultspring;

import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ScheduledFuture;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.TaskScheduler;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import org.springframework.scheduling.support.CronTrigger;

import com.r3edge.tasks.dispatcher.ITaskExecutionListener;
import com.r3edge.tasks.dispatcher.ITaskScheduler;
import com.r3edge.tasks.dispatcher.Task;
import com.r3edge.tasks.dispatcher.TaskHandler;
import com.r3edge.tasks.dispatcher.TaskInvokerService;

import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import lombok.extern.slf4j.Slf4j;

/**
 * Planifie des t√¢ches avec un cron via {@link ThreadPoolTaskScheduler}.
 */
@Slf4j
public class DefaultTaskScheduler implements ITaskScheduler {

	private final TaskScheduler scheduler;
	private final TaskInvokerService taskInvokerService;
	private final Map<String, ScheduledFuture<?>> scheduled = new ConcurrentHashMap<>();
	private final ITaskExecutionListener listener;

	/**
	 * @param invokerService service charg√© d'invoquer la t√¢che
	 * @param listener       listener de cycle de vie des t√¢ches
	 */
	public DefaultTaskScheduler(TaskInvokerService invokerService, ITaskExecutionListener listener) {
		ThreadPoolTaskScheduler threadPoolTaskScheduler = new ThreadPoolTaskScheduler();
		threadPoolTaskScheduler.setPoolSize(2);
		threadPoolTaskScheduler.setThreadNamePrefix("r3edge-task-");
		threadPoolTaskScheduler.initialize();
		this.scheduler = threadPoolTaskScheduler;
		this.taskInvokerService = invokerService;
		this.listener = listener;
	}

	/** Annule toutes les t√¢ches et arr√™te le scheduler. */
	@PreDestroy
	public void shutdown() {
		log.info("üßπ Nettoyage des t√¢ches planifi√©es avant arr√™t...");
		scheduled.values().forEach(future -> future.cancel(true));
		scheduled.clear();
		if (scheduler instanceof ThreadPoolTaskScheduler threadPool) {
			threadPool.shutdown();
		}
	}

	/**
	 * Planifie une t√¢che √† ex√©cuter selon son expression cron. Si une t√¢che avec le
	 * m√™me identifiant est d√©j√† planifi√©e, elle sera remplac√©e.
	 *
	 * @param task    La t√¢che √† planifier. Elle doit avoir un champ {@code cron}
	 *                non nul.
	 * @param handler Le gestionnaire √† invoquer au moment de l‚Äôex√©cution.
	 */
	@Override
	public void schedule(Task task, TaskHandler handler) {
	    String cron = task.getCron();
	    if (cron == null || cron.isBlank()) {
	        log.warn("‚è≠Ô∏è T√¢che id={} ignor√©e (pas de cron d√©fini)", task.getId());
	        return;
	    }

	    log.info("‚úÖ Planification via DefaultTaskScheduler : id={}, cron={}", task.getId(), cron);

	    Logger logger = LoggerFactory.getLogger(handler.getClass());
	    Runnable runnable = taskInvokerService.createRunnable(task, handler, listener, logger);
	    ScheduledFuture<?> future = scheduler.schedule(runnable, new CronTrigger(cron));

	    if (future != null) {
	        ScheduledFuture<?> previousFuture = scheduled.put(task.getId(), future);
	        log.info("üïí La t√¢che id={} a √©t√© planifi√©e avec le motif cron={}", task.getId(), cron);

	        if (previousFuture != null) {
	            log.warn("üîÅ La t√¢che {} a √©t√© remplac√©e par une nouvelle version", task.getId());
	            cancelFuture(previousFuture, task.getId());
	        }
	    }
	}


	/**
	 * Retourne la cl√© de strat√©gie associ√©e √† ce scheduler. Cette valeur permet
	 * d'identifier dynamiquement cette impl√©mentation.
	 *
	 * @return la cl√© "default".
	 */
	@Override
	public String strategyKey() {
		return "default";
	}

	/**
	 * Annule l'ex√©cution planifi√©e de la t√¢che sp√©cifi√©e, si elle est actuellement
	 * planifi√©e.
	 *
	 * @param task la t√¢che √† d√©sinscrire.
	 */
	@Override
	public void unschedule(Task task) {
		ScheduledFuture<?> future = scheduled.remove(task.getId());
		cancelFuture(future, task.getId());
	}

	/**
	 * Annule une t√¢che planifi√©e et logue l'action effectu√©e.
	 *
	 * @param future la t√¢che planifi√©e √† annuler.
	 * @param taskId identifiant de la t√¢che, pour le logging.
	 */
	private void cancelFuture(ScheduledFuture<?> future, String taskId) {
		if (future != null) {
			boolean isCanceled = future.cancel(true);
			if (isCanceled)
				log.info("‚ùå D√©planification dans DefaultTaskScheduler : id={}", taskId);
			else
				log.warn("‚ùå Echec d√©planification dans DefaultTaskScheduler : id={}", taskId);
		} else {
			log.debug("‚ÑπÔ∏è Aucune planification √† annuler pour id={}", taskId);
		}
	}

	/**
	 * Annule l'ex√©cution planifi√©e d'une t√¢che par son identifiant. Si aucune t√¢che
	 * n‚Äôest trouv√©e, l‚Äôappel est ignor√©.
	 *
	 * @param taskId identifiant de la t√¢che √† d√©sinscrire.
	 */
	@Override
	public void unscheduleById(String taskId) {
		ScheduledFuture<?> future = scheduled.remove(taskId);
		cancelFuture(future, taskId);
	}

	/**
	 * Retourne l‚Äôensemble des identifiants des t√¢ches actuellement planifi√©es.
	 *
	 * @return un ensemble d‚Äôidentifiants de t√¢ches.
	 */
	@Override
	public Set<String> getScheduledTaskIds() {
		return scheduled.keySet();
	}

	@PostConstruct
	private void logActivation() {
		log.debug("üîß Bean DefaultTaskScheduler initialis√©");
	}
}
