package com.r3edge.tasks.dispatcher.core;

import org.springframework.boot.web.context.WebServerInitializedEvent;
import org.springframework.cloud.context.scope.refresh.RefreshScopeRefreshedEvent;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * Composant central charg√© de dispatcher les t√¢ches configur√©es vers
 * les ex√©cutants ou planificateurs ad√©quats, en fonction de leur strat√©gie.
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class TaskDispatcher {

	private final TaskHandlerRegistry registry;
	private final TaskConfiguration taskConfiguration;
	private final TaskStrategyRouter strategyRouter;

	/**
	 * Dispatch une t√¢che en la d√©l√©guant au handler correspondant √† son type.
	 *
	 * @param task la t√¢che √† ex√©cuter
	 */
	public void dispatch(Task task) {
		if (!task.isEnabled()) {
			log.info("La t√¢che {} est d√©sactiv√©e, elle ne sera pas ex√©cut√©e.", task.getId());
			return;
		}

		TaskHandler handler = registry.getHandler(task.getType()).orElse(null);
		if (handler == null) {
			log.warn("‚ö†Ô∏è Aucun handler trouv√© pour le type '{}', t√¢che {} ignor√©e", task.getType(), task.getId());
			return;
		}

		String strategy = task.getStrategy();
		// Resolution dynamique
		ITaskExecutor executor = strategyRouter.resolveExecutor(task);
		ITaskScheduler scheduler = strategyRouter.resolveScheduler(task);

		String cron = task.getCron();
		if (cron != null && !cron.isBlank()) {
			log.debug("Dispatch CRON de la t√¢che {} avec le handler {} via strat√©gie '{}'", task.getId(),
					handler.getClass().getSimpleName(), strategy);
			scheduler.schedule(task, handler);
			return;
		}

		try {
			log.debug("Dispatch EXECUTOR de la t√¢che {} avec le handler {} via strat√©gie '{}'", task.getId(),
					handler.getClass().getSimpleName(), strategy);
			executor.execute(task, handler);
		} catch (Exception e) {
			log.error("üí• Erreur lors de l'ex√©cution de la t√¢che {}", task.getId(), e);
		}
	}

	/**
	 * √âv√©nement d√©clench√© au d√©marrage du serveur web. Permet de d√©clencher
	 * automatiquement le dispatch des t√¢ches configur√©es.
	 *
	 * @param event l'√©v√©nement de d√©marrage du serveur
	 */
	@EventListener(WebServerInitializedEvent.class)
	public void onApplicationEvent(WebServerInitializedEvent event) {
		log.info("üîÑ D√©marrage du service de dispatch.");
		taskConfiguration.getDefinitions().forEach(this::dispatch);
	}

	/**
	 * √âv√©nement d√©clench√© apr√®s un rafra√Æchissement de configuration. Permet de
	 * re-dispatcher les t√¢ches en fonction des nouvelles d√©finitions ou cron
	 * modifi√©s.
	 * 
	 * @param event L'√©v√©nement de rafra√Æchissement du scope.
	 */
	@EventListener(RefreshScopeRefreshedEvent.class)
	public void onRefreshEvent(RefreshScopeRefreshedEvent event) {
		refreshTasks();
	}

    /**
     * Recharge l'ensemble des t√¢ches √† partir de la configuration actuelle.
     */
	public void refreshTasks() {
		log.info("üîÅ Refresh complet des t√¢ches...");
		cleanupObsoleteTasks();
		taskConfiguration.getDefinitions().forEach(this::dispatch);
		log.info("‚úÖ Refresh termin√©.");
	}

    /**
     * Supprime toutes les t√¢ches actives planifi√©es ou en cours d'ex√©cution.
     */
	public void cleanupObsoleteTasks() {
		log.info("üßπ CleanUp des t√¢ches actives...");
		strategyRouter.allSchedulers().forEach(scheduler -> {
			for (String taskId : scheduler.getScheduledTaskIds()) {
				scheduler.unscheduleById(taskId);
			}
		});
		strategyRouter.allExecutors().forEach(executor -> {
			for (String taskId : executor.getExecutedTaskIds()) {
				Task fake = new Task(); // ‚ö†Ô∏è √† remplacer par withId(...) si possible
				fake.setId(taskId);
				executor.cancel(fake);
			}
		});
		log.info("‚úÖ CleanUp termin√©.");
	}

}
