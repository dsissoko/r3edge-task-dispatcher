package com.r3edge.tasks.dispatcher;

import org.springframework.boot.web.context.WebServerInitializedEvent;
import org.springframework.cloud.context.scope.refresh.RefreshScopeRefreshedEvent;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * Composant central charg√© de d√©l√©guer l'ex√©cution d'une t√¢che au handler
 * appropri√©.
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class TaskDispatcher {

	private final TaskHandlerRegistry registry;
	private final DefaultTaskExecutor defaultTaskExecutor;
	@Lazy
	private final ITaskScheduler taskScheduler;
	private final TaskConfiguration taskConfiguration;

	/**
	 * Dispatch une t√¢che en la d√©l√©guant au handler correspondant √† son type.
	 *
	 * @param task la t√¢che √† ex√©cuter
	 */
	public void dispatch(Task task) {
		if (!task.isEnabled()) {
			log.info("La t√¢che {} est d√©sactiv√©e, elle ne sera pas ex√©cut√©e.", task.getId());
			return;
		}

		TaskHandler handler = registry.getHandler(task.getType());
		if (handler == null) {
			log.warn("‚ö†Ô∏è Aucun handler trouv√© pour le type '{}', t√¢che {} ignor√©e", task.getType(), task.getId());
			//throw new TaskExecutionException("No handler found for task type: " + task.getType());
			return;
		}
		
        String cron = task.getCron();
        if (cron != null && taskScheduler != null) {
        	log.info("Planification de la t√¢che {} avec le handler {} et le scheduler {}", task.getId(), handler.getClass().getSimpleName(), taskScheduler);
            taskScheduler.schedule(task,() -> dispatch(task));
            return;
        }		

		try {
			log.info("Ex√©cution de la t√¢che {} avec le handler {}", task.getId(), handler.getClass().getSimpleName());
			defaultTaskExecutor.execute(task, handler);
		} catch (Exception e) {
			log.error("Erreur lors de l'ex√©cution de la t√¢che {}", task.getId(), e);
			//throw new TaskExecutionException("Failed to execute task " + task.getId(), e);
		}
	}

	@EventListener(WebServerInitializedEvent.class)
	public void onApplicationEvent(WebServerInitializedEvent event) {
		taskConfiguration.getDefinitions().forEach(t -> {
			log.debug("Lancement automatique de {}", t);
			dispatch(t);
		});
	}
	
	@EventListener(RefreshScopeRefreshedEvent.class)
	public void onRefreshEvent(RefreshScopeRefreshedEvent event) {
		log.info("üì• Refresh d√©tect√© : red√©clenchement des t√¢ches.");
		taskConfiguration.getDefinitions().forEach(t -> {
			log.debug("Redispatch de la t√¢che {}", t);
			dispatch(t);
		});
	}
}
