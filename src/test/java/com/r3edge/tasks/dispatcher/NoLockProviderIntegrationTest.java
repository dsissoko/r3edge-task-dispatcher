package com.r3edge.tasks.dispatcher;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import java.util.Map;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.system.CapturedOutput;
import org.springframework.boot.test.system.OutputCaptureExtension;

import com.r3edge.tasks.TestApplication;

/**
 * V√©rifie que les t√¢ches peuvent √™tre ex√©cut√©es ou non selon la pr√©sence d'un LockProvider.
 * Ces tests couvrent les cas o√π aucun m√©canisme de verrouillage distribu√© n'est pr√©sent.
 */
@SpringBootTest(
    classes = TestApplication.class,
    properties = {
            "spring.autoconfigure.exclude=net.javacrumbs.shedlock.spring.autoconfigure.ShedLockAutoConfiguration"
        }
	)
@ExtendWith(OutputCaptureExtension.class)
class NoLockProviderIntegrationTest {

    @Autowired
    private TaskDispatcher dispatcher;

    /**
     * Ce test v√©rifie qu'une t√¢che marqu√©e comme "distributedLock=true" √©choue
     * si aucun LockProvider n'est configur√© dans le contexte.
     */
    @Test
    void shouldFailDistributedTaskWhenNoLockProviderConfigured(CapturedOutput output) {
        // Given
        Task distributedTask = Task.builder()
                .id("no-lock-distributed")
                .type("print")
                .enabled(true)
                .distributedLock(true)
                .meta(Map.of("message", "Execution sans lock distribu√©"))
                .build();

        // When + Then
        assertThatThrownBy(() -> dispatcher.dispatch(distributedTask))
                .isInstanceOf(TaskExecutionException.class)
                .hasMessageContaining("Failed to execute task")
                .hasCauseInstanceOf(TaskExecutionException.class)
                .cause()
                .hasMessageContaining("no LockProvider configured for task");

        assertThat(output.getOut()).doesNotContain("üì£ PrintTaskHandler ex√©cut√©");
    }


    /**
     * Ce test v√©rifie qu'une t√¢che locale (distributedLock=false) est bien ex√©cut√©e
     * sans LockProvider.
     */
    @Test
    void shouldExecuteNonDistributedTaskWithoutLockWhenNoProvider(CapturedOutput output) {
        // Given
        Task localTask = Task.builder()
                .id("no-lock-local")
                .type("print")
                .enabled(true)
                .distributedLock(false)
                .meta(Map.of("message", "Execution locale sans lock"))
                .build();

        // When
        dispatcher.dispatch(localTask);

        // Then
        assertThat(output.getOut())
                .contains("üì£ PrintTaskHandler ex√©cut√© : Execution locale sans lock")
                .doesNotContain("lock acquired")
                .doesNotContain("lock released");
    }

    /**
     * Ce test v√©rifie qu‚Äôune t√¢che d√©sactiv√©e n‚Äôest pas ex√©cut√©e,
     * et donc qu‚Äôaucun handler n‚Äôest appel√© m√™me si un LockProvider est attendu.
     */
    @Test
    void shouldNotExecuteDisabledTask(CapturedOutput output) {
        // Given
        Task disabledTask = Task.builder()
                .id("disabled-task")
                .type("print")
                .enabled(false) // üö´
                .distributedLock(true) // m√™me avec lock demand√©
                .meta(Map.of("message", "Ne pas ex√©cuter"))
                .build();

        // When
        dispatcher.dispatch(disabledTask);

        // Then
        assertThat(output.getOut())
                .contains("est d√©sactiv√©e, elle ne sera pas ex√©cut√©e")
                .doesNotContain("üì£ PrintTaskHandler ex√©cut√©");
    }

    /**
     * Ce test v√©rifie que le dispatcher √©choue correctement
     * si on lui donne un type de t√¢che inconnu (sans handler enregistr√©).
     */
    @Test
    void shouldFailWhenNoHandlerFound(CapturedOutput output) {
        // Given
        Task unknownTask = Task.builder()
                .id("unknown-handler")
                .type("unknown-type")
                .enabled(true)
                .distributedLock(false)
                .build();

        // When + Then
        assertThatThrownBy(() -> dispatcher.dispatch(unknownTask))
                .isInstanceOf(TaskExecutionException.class)
                .hasMessageContaining("No handler found");

        assertThat(output.getOut())
                .contains("‚ö†Ô∏è Aucun handler trouv√© pour le type");
    }
}
